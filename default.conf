
# This is my keyd config. There are many
# like it, but this one is mine. (2023)


[ids]
*

[main]

# Make the left Control key on Linux behave
# like the left Command key on Mac, because
# this naturally maps the most code keyboard
# shortcuts for us, e.g. Ctrl-C copy, Ctrl-V
# paste, etc.
#
leftalt = layer(control)

# Make the Meta key (aka Windows key) the Alt
# key, since we remapped Alt above.
#
leftmeta = layer(alt)

# Finally use the pinkie left Control key as
# the Meta key.
#
leftcontrol = layer(meta)

# So now what we have going on is basically
# just a keyboard remapping, which effectively
# just moves Control, Alt, and Meta to more
# convenient (for me) positions.
#
# Within each layer, we can handle the various
# exceptions and special cases. Remapping the
# keys is the first step. The second step is
# more specific, as individual keyboard shortcuts
# are mapped to the finger positions I want
# them to be, and to handle all the stuff that
# is not the same between the platforms.

# But first, let's handle the single-key editing
# commands:

# Because of the Mac's superior text editing
# defaults, there is no need for the Home and
# End key functionality that we see on Windows
# and Linux. So map those keys to the action
# that corresponds to the Mac's behavior of 
# navigating to the start/end of the document, 
# as opposed to the line:
#
home = C-home
end = C-end

# The [control] layer is when the Control key
# is down, but with our remapped keyboard, we
# can think of this as analagous to the Command
# key being down. (While remembering that there
# actually is no such thing as the Command key
# on Linux. So we are mapping individual keyboard
# shortcuts from here on out, but don't forget
# that the Command key doesn't exist here. What
# we're trying to achieve is finger-position
# equivalence across platforms, but only for the
# keyboard shortcuts that are actually important
# and where the Mac convention is objectively
# superior to the Linux/Windows convention (which
# is most of them).
#
[control]

# ⌘ + left/right line start/dend navigation
#
# These next two implement moving the cursor
# to the line start/end like Mac. Note that
# with keyd, we don't need separate shortcut
# definitions to handle the selection variants
# of these -- if combined with Shift, it will 
# work as expected (e.g. select to line start
# or end) with no additional config.
#
left = home
right = end


# THIS BELOW SHIT DOESNT WORK 
# BECAUSE KEY UP EVENT HAPPEN AND FUCK THE DOG
#
# INSTEAD GO KDE SETTINGS -> WINDOW MANAGEMENT -> TASK SWITCHER AND SET
# Switch apps. Mac uses Cmd-Tab, most non-Mac uses Alt-Tab.
# Both of those are [-1][tab] on their native layouts, so
# this yields Linux/Mac equivalence.
#
#tab = A-tab

# Same for window switching.
#
#` = A-`

[alt]

# ⌥ + left/right wordwise navigation
#
left = C-left
right = C-right

[meta]
f = macro(FUCK YOU)


c = C-c
a = C-a
e = C-e


